/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <140>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <140>;
            hold-trigger-on-release;
        };

        tilde_and_backtick: tilde_and_backtick {
            compatible = "zmk,behavior-mod-morph";
            label = "TILDE_AND_BACKTICK";
            bindings = <&kp GRAVE>, <&none>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <17 18>;
        };

        lshift {
            bindings = <&kp LSHFT>;
            key-positions = <>;
        };

        rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <>;
        };

        option {
            bindings = <&kp LEFT_ALT>;
            key-positions = <>;
        };

        ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <>;
        };

        cmdspace {
            bindings = <&kp LG(SPACE)>;
            key-positions = <>;
        };

        rightctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <>;
        };

        rightoption {
            bindings = <&kp LEFT_ALT>;
            key-positions = <>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q         &kp W            &kp E            &kp R          &kp T        &kp Y    &kp U               &kp I             &kp O             &kp P            &none
&none  &hml LCTRL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LSHIFT F  &kp G        &kp H    &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &hmr RCTRL SEMI  &none
&none  &kp Z         &kp X            &kp C            &kp V          &kp B        &kp N    &kp M               &kp COMMA         &kp DOT           &kp FSLH         &none
                                      &kp LGUI         &mo 1          &kp SPACE    &kp RET  &kp BACKSPACE       &mo 2
            >;
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp N1                &kp N2          &kp N3    &kp N4  &kp N5       &kp N6      &kp N7        &kp N8           &kp N9            &kp N0  &none
&none  &kp ESCAPE            &bt BT_SEL 0    &none     &trans  &trans       &kp LEFT    &kp DOWN      &kp UP           &kp RIGHT         &trans  &trans
&none  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))  &trans    &trans  &trans       &kp K_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &trans  &trans
                                             &kp LGUI  &to 0   &kp SPACE    &kp RET     &kp LCTRL     &kp RALT
            >;
        };

        specs {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCLAMATION  &kp AT                &kp HASH               &kp DLLR   &kp PRCNT              &kp CARET         &kp AMPS        &kp KP_MULTIPLY    &kp PIPE          &kp DOUBLE_QUOTES  &trans
&trans  &kp ESC          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp MINUS              &kp SINGLE_QUOTE  &kp LEFT_BRACE  &kp RIGHT_BRACE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans
&trans  &trans           &trans                &trans                 &trans     &tilde_and_backtick    &kp UNDER         &kp PLUS        &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp SLASH          &trans
                                               &kp LGUI               &to 0      &kp SPACE              &kp RET           &none           &kp RALT
            >;
        };
    };
};
